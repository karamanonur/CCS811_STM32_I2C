
CCS811_NUCLEO_F070RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002cfc  08002cfc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cfc  08002cfc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000014  08002d18  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002d18  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b749  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b30  00000000  00000000  0002b785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe74  00000000  00000000  0002e450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a082  00000000  00000000  0003e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005db1e  00000000  00000000  00048346  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5e64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  000a5ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cac 	.word	0x08002cac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002cac 	.word	0x08002cac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CCS811_SoftwareReset>:
static uint8_t Mode2 = 0x20;
static uint8_t Mode3 = 0x30;
static uint8_t Mode4 = 0x40;

static void CCS811_SoftwareReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
	uint8_t txData[5] = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2305      	movs	r3, #5
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fd34 	bl	8002c9c <memset>

	/* Software Reset Register Address */
	txData[0] = 0xFF;
 8000234:	003b      	movs	r3, r7
 8000236:	22ff      	movs	r2, #255	; 0xff
 8000238:	701a      	strb	r2, [r3, #0]

	/* Reset Sequence*/
	txData[1] = 0x11;
 800023a:	003b      	movs	r3, r7
 800023c:	2211      	movs	r2, #17
 800023e:	705a      	strb	r2, [r3, #1]
	txData[2] = 0xE5;
 8000240:	003b      	movs	r3, r7
 8000242:	22e5      	movs	r2, #229	; 0xe5
 8000244:	709a      	strb	r2, [r3, #2]
	txData[3] = 0x72;
 8000246:	003b      	movs	r3, r7
 8000248:	2272      	movs	r2, #114	; 0x72
 800024a:	70da      	strb	r2, [r3, #3]
	txData[4] = 0x8A;
 800024c:	003b      	movs	r3, r7
 800024e:	228a      	movs	r2, #138	; 0x8a
 8000250:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), txData, 5, HAL_MAX_DELAY);
 8000252:	003a      	movs	r2, r7
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <CCS811_SoftwareReset+0x58>)
 8000256:	2301      	movs	r3, #1
 8000258:	425b      	negs	r3, r3
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2305      	movs	r3, #5
 800025e:	21b4      	movs	r1, #180	; 0xb4
 8000260:	f000 ffa4 	bl	80011ac <HAL_I2C_Master_Transmit>

	HAL_Delay(500);
 8000264:	23fa      	movs	r3, #250	; 0xfa
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fca5 	bl	8000bb8 <HAL_Delay>
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	b002      	add	sp, #8
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000040 	.word	0x20000040

0800027c <CCS811_ApplicationStart>:

static void CCS811_ApplicationStart(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af02      	add	r7, sp, #8
	/* Application Start Register Address */
	 uint8_t txData = 0xF4;
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	22f4      	movs	r2, #244	; 0xf4
 8000286:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &txData, 1, HAL_MAX_DELAY);
 8000288:	1dfa      	adds	r2, r7, #7
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <CCS811_ApplicationStart+0x30>)
 800028c:	2301      	movs	r3, #1
 800028e:	425b      	negs	r3, r3
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	21b4      	movs	r1, #180	; 0xb4
 8000296:	f000 ff89 	bl	80011ac <HAL_I2C_Master_Transmit>

	HAL_Delay(500);
 800029a:	23fa      	movs	r3, #250	; 0xfa
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fc8a 	bl	8000bb8 <HAL_Delay>
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b002      	add	sp, #8
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000040 	.word	0x20000040

080002b0 <CCS811_ReadStatus>:

static uint8_t CCS811_ReadStatus(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af02      	add	r7, sp, #8
	/* Status Register Address */
	uint8_t txData = 0x00;
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]

	/* Buffer to store return value */
	uint8_t rxData = 0;
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &txData, 1, HAL_MAX_DELAY);
 80002c2:	1dfa      	adds	r2, r7, #7
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <CCS811_ReadStatus+0x44>)
 80002c6:	2301      	movs	r3, #1
 80002c8:	425b      	negs	r3, r3
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	21b4      	movs	r1, #180	; 0xb4
 80002d0:	f000 ff6c 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (CCS822_DEVICE_ADDR<<1), &rxData, 1, HAL_MAX_DELAY);
 80002d4:	1dba      	adds	r2, r7, #6
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <CCS811_ReadStatus+0x44>)
 80002d8:	2301      	movs	r3, #1
 80002da:	425b      	negs	r3, r3
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2301      	movs	r3, #1
 80002e0:	21b4      	movs	r1, #180	; 0xb4
 80002e2:	f001 f86b 	bl	80013bc <HAL_I2C_Master_Receive>

	return rxData;
 80002e6:	1dbb      	adds	r3, r7, #6
 80002e8:	781b      	ldrb	r3, [r3, #0]
}
 80002ea:	0018      	movs	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b002      	add	sp, #8
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	20000040 	.word	0x20000040

080002f8 <CCS811_SetMeasureMode>:

static void CCS811_SetMeasureMode(int mode)
{
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	6078      	str	r0, [r7, #4]
	/* Application Start */
	CCS811_ApplicationStart();
 8000300:	f7ff ffbc 	bl	800027c <CCS811_ApplicationStart>

	/* Check if firmware is in application mode */
	uint8_t firmwareMode = 0b10000000;
 8000304:	250f      	movs	r5, #15
 8000306:	197b      	adds	r3, r7, r5
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	701a      	strb	r2, [r3, #0]
	uint8_t status = CCS811_ReadStatus();
 800030c:	260e      	movs	r6, #14
 800030e:	19bc      	adds	r4, r7, r6
 8000310:	f7ff ffce 	bl	80002b0 <CCS811_ReadStatus>
 8000314:	0003      	movs	r3, r0
 8000316:	7023      	strb	r3, [r4, #0]
	if(!(status & firmwareMode)) while(1);
 8000318:	19bb      	adds	r3, r7, r6
 800031a:	197a      	adds	r2, r7, r5
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	7812      	ldrb	r2, [r2, #0]
 8000320:	4013      	ands	r3, r2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d100      	bne.n	800032a <CCS811_SetMeasureMode+0x32>
 8000328:	e7fe      	b.n	8000328 <CCS811_SetMeasureMode+0x30>

	switch(mode)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d01b      	beq.n	8000368 <CCS811_SetMeasureMode+0x70>
 8000330:	dc02      	bgt.n	8000338 <CCS811_SetMeasureMode+0x40>
 8000332:	2b01      	cmp	r3, #1
 8000334:	d005      	beq.n	8000342 <CCS811_SetMeasureMode+0x4a>
 8000336:	e04d      	b.n	80003d4 <CCS811_SetMeasureMode+0xdc>
 8000338:	2b03      	cmp	r3, #3
 800033a:	d027      	beq.n	800038c <CCS811_SetMeasureMode+0x94>
 800033c:	2b04      	cmp	r3, #4
 800033e:	d037      	beq.n	80003b0 <CCS811_SetMeasureMode+0xb8>
 8000340:	e048      	b.n	80003d4 <CCS811_SetMeasureMode+0xdc>
	{
	case 1:
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 8000342:	4a2f      	ldr	r2, [pc, #188]	; (8000400 <CCS811_SetMeasureMode+0x108>)
 8000344:	482f      	ldr	r0, [pc, #188]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 8000346:	2301      	movs	r3, #1
 8000348:	425b      	negs	r3, r3
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2301      	movs	r3, #1
 800034e:	21b4      	movs	r1, #180	; 0xb4
 8000350:	f000 ff2c 	bl	80011ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode1, 1, HAL_MAX_DELAY);
 8000354:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <CCS811_SetMeasureMode+0x110>)
 8000356:	482b      	ldr	r0, [pc, #172]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 8000358:	2301      	movs	r3, #1
 800035a:	425b      	negs	r3, r3
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2301      	movs	r3, #1
 8000360:	21b4      	movs	r1, #180	; 0xb4
 8000362:	f000 ff23 	bl	80011ac <HAL_I2C_Master_Transmit>
		break;
 8000366:	e047      	b.n	80003f8 <CCS811_SetMeasureMode+0x100>
	case 2:
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <CCS811_SetMeasureMode+0x108>)
 800036a:	4826      	ldr	r0, [pc, #152]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 800036c:	2301      	movs	r3, #1
 800036e:	425b      	negs	r3, r3
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2301      	movs	r3, #1
 8000374:	21b4      	movs	r1, #180	; 0xb4
 8000376:	f000 ff19 	bl	80011ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode2, 1, HAL_MAX_DELAY);
 800037a:	4a24      	ldr	r2, [pc, #144]	; (800040c <CCS811_SetMeasureMode+0x114>)
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 800037e:	2301      	movs	r3, #1
 8000380:	425b      	negs	r3, r3
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2301      	movs	r3, #1
 8000386:	21b4      	movs	r1, #180	; 0xb4
 8000388:	f000 ff10 	bl	80011ac <HAL_I2C_Master_Transmit>
	case 3:
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 800038c:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <CCS811_SetMeasureMode+0x108>)
 800038e:	481d      	ldr	r0, [pc, #116]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 8000390:	2301      	movs	r3, #1
 8000392:	425b      	negs	r3, r3
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2301      	movs	r3, #1
 8000398:	21b4      	movs	r1, #180	; 0xb4
 800039a:	f000 ff07 	bl	80011ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode3, 1, HAL_MAX_DELAY);
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <CCS811_SetMeasureMode+0x118>)
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 80003a2:	2301      	movs	r3, #1
 80003a4:	425b      	negs	r3, r3
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2301      	movs	r3, #1
 80003aa:	21b4      	movs	r1, #180	; 0xb4
 80003ac:	f000 fefe 	bl	80011ac <HAL_I2C_Master_Transmit>
	case 4:
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <CCS811_SetMeasureMode+0x108>)
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 80003b4:	2301      	movs	r3, #1
 80003b6:	425b      	negs	r3, r3
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2301      	movs	r3, #1
 80003bc:	21b4      	movs	r1, #180	; 0xb4
 80003be:	f000 fef5 	bl	80011ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode4, 1, HAL_MAX_DELAY);
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <CCS811_SetMeasureMode+0x11c>)
 80003c4:	480f      	ldr	r0, [pc, #60]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 80003c6:	2301      	movs	r3, #1
 80003c8:	425b      	negs	r3, r3
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2301      	movs	r3, #1
 80003ce:	21b4      	movs	r1, #180	; 0xb4
 80003d0:	f000 feec 	bl	80011ac <HAL_I2C_Master_Transmit>
	default:
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <CCS811_SetMeasureMode+0x108>)
 80003d6:	480b      	ldr	r0, [pc, #44]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 80003d8:	2301      	movs	r3, #1
 80003da:	425b      	negs	r3, r3
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2301      	movs	r3, #1
 80003e0:	21b4      	movs	r1, #180	; 0xb4
 80003e2:	f000 fee3 	bl	80011ac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode1, 1, HAL_MAX_DELAY);
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <CCS811_SetMeasureMode+0x110>)
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <CCS811_SetMeasureMode+0x10c>)
 80003ea:	2301      	movs	r3, #1
 80003ec:	425b      	negs	r3, r3
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2301      	movs	r3, #1
 80003f2:	21b4      	movs	r1, #180	; 0xb4
 80003f4:	f000 feda 	bl	80011ac <HAL_I2C_Master_Transmit>
	}
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b005      	add	sp, #20
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	20000000 	.word	0x20000000
 8000404:	20000040 	.word	0x20000040
 8000408:	20000001 	.word	0x20000001
 800040c:	20000002 	.word	0x20000002
 8000410:	20000003 	.word	0x20000003
 8000414:	20000004 	.word	0x20000004

08000418 <CCS811_GetAlgorithmResultsData>:

static void CCS811_GetAlgorithmResultsData(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b087      	sub	sp, #28
 800041c:	af02      	add	r7, sp, #8
	/* Check if the data ready */
	uint8_t dataReady = 0b00001000;
 800041e:	230e      	movs	r3, #14
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	2208      	movs	r2, #8
 8000424:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000426:	230f      	movs	r3, #15
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
	while(!(status & dataReady))
 800042e:	e008      	b.n	8000442 <CCS811_GetAlgorithmResultsData+0x2a>
	{
		status = CCS811_ReadStatus();
 8000430:	230f      	movs	r3, #15
 8000432:	18fc      	adds	r4, r7, r3
 8000434:	f7ff ff3c 	bl	80002b0 <CCS811_ReadStatus>
 8000438:	0003      	movs	r3, r0
 800043a:	7023      	strb	r3, [r4, #0]
		HAL_Delay(10);
 800043c:	200a      	movs	r0, #10
 800043e:	f000 fbbb 	bl	8000bb8 <HAL_Delay>
	while(!(status & dataReady))
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	220e      	movs	r2, #14
 8000448:	18ba      	adds	r2, r7, r2
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	4013      	ands	r3, r2
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0ec      	beq.n	8000430 <CCS811_GetAlgorithmResultsData+0x18>
	}

	uint8_t txData = 0x02;
 8000456:	240d      	movs	r4, #13
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2202      	movs	r2, #2
 800045c:	701a      	strb	r2, [r3, #0]
	uint8_t rxData[8] = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2308      	movs	r3, #8
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f002 fc18 	bl	8002c9c <memset>

	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &txData, 1, HAL_MAX_DELAY);
 800046c:	193a      	adds	r2, r7, r4
 800046e:	481c      	ldr	r0, [pc, #112]	; (80004e0 <CCS811_GetAlgorithmResultsData+0xc8>)
 8000470:	2301      	movs	r3, #1
 8000472:	425b      	negs	r3, r3
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	21b4      	movs	r1, #180	; 0xb4
 800047a:	f000 fe97 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (CCS822_DEVICE_ADDR<<1), rxData, 8, HAL_MAX_DELAY);
 800047e:	1d3a      	adds	r2, r7, #4
 8000480:	4817      	ldr	r0, [pc, #92]	; (80004e0 <CCS811_GetAlgorithmResultsData+0xc8>)
 8000482:	2301      	movs	r3, #1
 8000484:	425b      	negs	r3, r3
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2308      	movs	r3, #8
 800048a:	21b4      	movs	r1, #180	; 0xb4
 800048c:	f000 ff96 	bl	80013bc <HAL_I2C_Master_Receive>

	CCS811_AlgorithmResults._eCO2_HighByte = rxData[0];
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 8000496:	701a      	strb	r2, [r3, #0]
	CCS811_AlgorithmResults._eCO2_LowByte = rxData[1];
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	785a      	ldrb	r2, [r3, #1]
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 800049e:	705a      	strb	r2, [r3, #1]
	CCS811_AlgorithmResults._eTVOC_HighByte = rxData[2];
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	789a      	ldrb	r2, [r3, #2]
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 80004a6:	709a      	strb	r2, [r3, #2]
	CCS811_AlgorithmResults._eTVOC_LowByte = rxData[3];
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	78da      	ldrb	r2, [r3, #3]
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 80004ae:	70da      	strb	r2, [r3, #3]
	CCS811_AlgorithmResults._STATUS = rxData[4];
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 80004b6:	711a      	strb	r2, [r3, #4]
	CCS811_AlgorithmResults._ERROR_ID = rxData[5];
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	795a      	ldrb	r2, [r3, #5]
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 80004be:	715a      	strb	r2, [r3, #5]
	CCS811_AlgorithmResults._RAW_DATA = (rxData[6] << 8) | (rxData[7]);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	021b      	lsls	r3, r3, #8
 80004c6:	b21a      	sxth	r2, r3
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b21b      	sxth	r3, r3
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <CCS811_GetAlgorithmResultsData+0xcc>)
 80004d6:	80da      	strh	r2, [r3, #6]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b005      	add	sp, #20
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	20000040 	.word	0x20000040
 80004e4:	20000038 	.word	0x20000038

080004e8 <CCS811_IdleMode>:

void CCS811_IdleMode(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &MEAS_MODE_REG, 1, HAL_MAX_DELAY);
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <CCS811_IdleMode+0x40>)
 80004f0:	480e      	ldr	r0, [pc, #56]	; (800052c <CCS811_IdleMode+0x44>)
 80004f2:	2301      	movs	r3, #1
 80004f4:	425b      	negs	r3, r3
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2301      	movs	r3, #1
 80004fa:	21b4      	movs	r1, #180	; 0xb4
 80004fc:	f000 fe56 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &Mode0, 1, HAL_MAX_DELAY);
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <CCS811_IdleMode+0x48>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <CCS811_IdleMode+0x44>)
 8000504:	2301      	movs	r3, #1
 8000506:	425b      	negs	r3, r3
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	21b4      	movs	r1, #180	; 0xb4
 800050e:	f000 fe4d 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2201      	movs	r2, #1
 8000518:	2120      	movs	r1, #32
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fd92 	bl	8001044 <HAL_GPIO_WritePin>
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000000 	.word	0x20000000
 800052c:	20000040 	.word	0x20000040
 8000530:	20000030 	.word	0x20000030

08000534 <CCS811_WakeUp>:

void CCS811_WakeUp(int mode)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800053c:	2390      	movs	r3, #144	; 0x90
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2200      	movs	r2, #0
 8000542:	2120      	movs	r1, #32
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fd7d 	bl	8001044 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f000 fb34 	bl	8000bb8 <HAL_Delay>
	CCS811_SetMeasureMode(mode);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff fed0 	bl	80002f8 <CCS811_SetMeasureMode>
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}

08000560 <CCS811_ReadData>:

void CCS811_ReadData(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	CCS811_GetAlgorithmResultsData();
 8000564:	f7ff ff58 	bl	8000418 <CCS811_GetAlgorithmResultsData>
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <CCS822_Init>:

void CCS822_Init(int mode)
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
	/* Software Reset */
	CCS811_SoftwareReset();
 8000578:	f7ff fe52 	bl	8000220 <CCS811_SoftwareReset>

	/* Check Hardware ID */
	uint8_t rxData = 0;
 800057c:	240d      	movs	r4, #13
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
	uint8_t txData = 0x20;
 8000584:	210c      	movs	r1, #12
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2220      	movs	r2, #32
 800058a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (CCS822_DEVICE_ADDR<<1), &txData, 1, HAL_MAX_DELAY);
 800058c:	187a      	adds	r2, r7, r1
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <CCS822_Init+0x8c>)
 8000590:	2301      	movs	r3, #1
 8000592:	425b      	negs	r3, r3
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	21b4      	movs	r1, #180	; 0xb4
 800059a:	f000 fe07 	bl	80011ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (CCS822_DEVICE_ADDR<<1), &rxData, 1, HAL_MAX_DELAY);
 800059e:	193a      	adds	r2, r7, r4
 80005a0:	4816      	ldr	r0, [pc, #88]	; (80005fc <CCS822_Init+0x8c>)
 80005a2:	2301      	movs	r3, #1
 80005a4:	425b      	negs	r3, r3
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	21b4      	movs	r1, #180	; 0xb4
 80005ac:	f000 ff06 	bl	80013bc <HAL_I2C_Master_Receive>
	if(rxData != 0x81) while(1);
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b81      	cmp	r3, #129	; 0x81
 80005b6:	d000      	beq.n	80005ba <CCS822_Init+0x4a>
 80005b8:	e7fe      	b.n	80005b8 <CCS822_Init+0x48>

	/* Check if the app is valid */
	uint8_t appValid = 0b00010000;
 80005ba:	250f      	movs	r5, #15
 80005bc:	197b      	adds	r3, r7, r5
 80005be:	2210      	movs	r2, #16
 80005c0:	701a      	strb	r2, [r3, #0]
	uint8_t status = CCS811_ReadStatus();
 80005c2:	260e      	movs	r6, #14
 80005c4:	19bc      	adds	r4, r7, r6
 80005c6:	f7ff fe73 	bl	80002b0 <CCS811_ReadStatus>
 80005ca:	0003      	movs	r3, r0
 80005cc:	7023      	strb	r3, [r4, #0]
	if(!(status & appValid)) while(1);
 80005ce:	19bb      	adds	r3, r7, r6
 80005d0:	197a      	adds	r2, r7, r5
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4013      	ands	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d100      	bne.n	80005e0 <CCS822_Init+0x70>
 80005de:	e7fe      	b.n	80005de <CCS822_Init+0x6e>

	/* Set Drive Mode (as interrupt disabled) */
	CCS811_SetMeasureMode(mode);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff fe88 	bl	80002f8 <CCS811_SetMeasureMode>
	HAL_Delay(4000);
 80005e8:	23fa      	movs	r3, #250	; 0xfa
 80005ea:	011b      	lsls	r3, r3, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fae3 	bl	8000bb8 <HAL_Delay>
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b005      	add	sp, #20
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000040 	.word	0x20000040

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	240c      	movs	r4, #12
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2314      	movs	r3, #20
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f002 fb43 	bl	8002c9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_GPIO_Init+0xa8>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	03c9      	lsls	r1, r1, #15
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	03db      	lsls	r3, r3, #15
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0289      	lsls	r1, r1, #10
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	029b      	lsls	r3, r3, #10
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_GPIO_Init+0xa8>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	02c9      	lsls	r1, r1, #11
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_GPIO_Init+0xa8>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	02db      	lsls	r3, r3, #11
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fce6 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000678:	0021      	movs	r1, r4
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2220      	movs	r2, #32
 800067e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	187a      	adds	r2, r7, r1
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fb62 	bl	8000d64 <HAL_GPIO_Init>

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b009      	add	sp, #36	; 0x24
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fcc9 	bl	8001080 <HAL_I2C_Init>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 f910 	bl	8000916 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x74>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 f95e 	bl	80019bc <HAL_I2CEx_ConfigAnalogFilter>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f907 	bl	8000916 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_I2C1_Init+0x74>)
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f9a1 	bl	8001a54 <HAL_I2CEx_ConfigDigitalFilter>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f8fe 	bl	8000916 <Error_Handler>
  }

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000040 	.word	0x20000040
 8000724:	40005400 	.word	0x40005400
 8000728:	2000090e 	.word	0x2000090e

0800072c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2314      	movs	r3, #20
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 faac 	bl	8002c9c <memset>
  if(i2cHandle->Instance==I2C1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <HAL_I2C_MspInit+0x90>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d131      	bne.n	80007b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	02c9      	lsls	r1, r1, #11
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	02db      	lsls	r3, r3, #11
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800076a:	2114      	movs	r1, #20
 800076c:	187b      	adds	r3, r7, r1
 800076e:	22c0      	movs	r2, #192	; 0xc0
 8000770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2212      	movs	r2, #18
 8000776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2203      	movs	r2, #3
 8000782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	187b      	adds	r3, r7, r1
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <HAL_I2C_MspInit+0x98>)
 800078e:	0019      	movs	r1, r3
 8000790:	0010      	movs	r0, r2
 8000792:	f000 fae7 	bl	8000d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0389      	lsls	r1, r1, #14
 80007a0:	430a      	orrs	r2, r1
 80007a2:	61da      	str	r2, [r3, #28]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_I2C_MspInit+0x94>)
 80007a6:	69da      	ldr	r2, [r3, #28]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	039b      	lsls	r3, r3, #14
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b00a      	add	sp, #40	; 0x28
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000400 	.word	0x48000400

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 f990 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f83c 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff ff14 	bl	8000600 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007d8:	f7ff ff68 	bl	80006ac <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 f8e2 	bl	80009a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fc2b 	bl	8001044 <HAL_GPIO_WritePin>
  CCS822_Init(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff febe 	bl	8000570 <CCS822_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CCS811_ReadData();
 80007f4:	f7ff feb4 	bl	8000560 <CCS811_ReadData>

	  CO2 = (CCS811_AlgorithmResults._eCO2_HighByte << 8) | CCS811_AlgorithmResults._eCO2_LowByte;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0x78>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <main+0x78>)
 8000802:	785b      	ldrb	r3, [r3, #1]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <main+0x7c>)
 800080e:	801a      	strh	r2, [r3, #0]
	  TVOC = (CCS811_AlgorithmResults._eTVOC_HighByte << 8) | CCS811_AlgorithmResults._eTVOC_LowByte;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <main+0x78>)
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <main+0x78>)
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <main+0x80>)
 8000826:	801a      	strh	r2, [r3, #0]

	  CCS811_IdleMode();
 8000828:	f7ff fe5e 	bl	80004e8 <CCS811_IdleMode>
	  HAL_Delay(2000);
 800082c:	23fa      	movs	r3, #250	; 0xfa
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f9c1 	bl	8000bb8 <HAL_Delay>
	  CCS811_WakeUp(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe7c 	bl	8000534 <CCS811_WakeUp>
	  CCS811_ReadData();
 800083c:	e7da      	b.n	80007f4 <main+0x2c>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000038 	.word	0x20000038
 8000844:	20000032 	.word	0x20000032
 8000848:	20000034 	.word	0x20000034

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b097      	sub	sp, #92	; 0x5c
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	2428      	movs	r4, #40	; 0x28
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2330      	movs	r3, #48	; 0x30
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f002 fa1d 	bl	8002c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000862:	2318      	movs	r3, #24
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2310      	movs	r3, #16
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f002 fa15 	bl	8002c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fa0e 	bl	8002c9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2203      	movs	r2, #3
 8000886:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2210      	movs	r2, #16
 8000898:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2202      	movs	r2, #2
 800089e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0252      	lsls	r2, r2, #9
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0352      	lsls	r2, r2, #13
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 f917 	bl	8001aec <HAL_RCC_OscConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008c2:	f000 f828 	bl	8000916 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	2118      	movs	r1, #24
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2207      	movs	r2, #7
 80008cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2101      	movs	r1, #1
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fc1f 	bl	8002128 <HAL_RCC_ClockConfig>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ee:	f000 f812 	bl	8000916 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2220      	movs	r2, #32
 80008f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fd65 	bl	80023d0 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800090a:	f000 f804 	bl	8000916 <Error_Handler>
  }
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b017      	add	sp, #92	; 0x5c
 8000914:	bd90      	pop	{r4, r7, pc}

08000916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	619a      	str	r2, [r3, #24]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	69da      	ldr	r2, [r3, #28]
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0549      	lsls	r1, r1, #21
 8000948:	430a      	orrs	r2, r1
 800094a:	61da      	str	r2, [r3, #28]
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_MspInit+0x44>)
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	055b      	lsls	r3, r3, #21
 8000954:	4013      	ands	r3, r2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8f6 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART2_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009b0:	22e1      	movs	r2, #225	; 0xe1
 80009b2:	0252      	lsls	r2, r2, #9
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x58>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fdcf 	bl	800258c <HAL_UART_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f7ff ff90 	bl	8000916 <Error_Handler>
  }

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000008c 	.word	0x2000008c
 8000a00:	40004400 	.word	0x40004400

08000a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f002 f940 	bl	8002c9c <memset>
  if(uartHandle->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0x90>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d132      	bne.n	8000a8c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	61da      	str	r2, [r3, #28]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5e:	2114      	movs	r1, #20
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2202      	movs	r2, #2
 8000a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2203      	movs	r2, #3
 8000a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	187a      	adds	r2, r7, r1
 8000a80:	2390      	movs	r3, #144	; 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f96c 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b00a      	add	sp, #40	; 0x28
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40021000 	.word	0x40021000

08000a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac6:	f7ff ff68 	bl	800099a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aca:	f002 f8c3 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fe7b 	bl	80007c8 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ae0:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 8000ae4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ae8:	20000114 	.word	0x20000114

08000aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_IRQHandler>
	...

08000af0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_Init+0x24>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_Init+0x24>)
 8000afa:	2110      	movs	r1, #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f809 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b06:	f7ff ff0b 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b22:	681c      	ldr	r4, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_InitTick+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	23fa      	movs	r3, #250	; 0xfa
 8000b2c:	0098      	lsls	r0, r3, #2
 8000b2e:	f7ff faeb 	bl	8000108 <__udivsi3>
 8000b32:	0003      	movs	r3, r0
 8000b34:	0019      	movs	r1, r3
 8000b36:	0020      	movs	r0, r4
 8000b38:	f7ff fae6 	bl	8000108 <__udivsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 f903 	bl	8000d4a <HAL_SYSTICK_Config>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e00f      	b.n	8000b6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d80b      	bhi.n	8000b6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f8e0 	bl	8000d20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_InitTick+0x64>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	2000000c 	.word	0x2000000c

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	18d2      	adds	r2, r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	20000110 	.word	0x20000110

08000ba4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000110 	.word	0x20000110

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_Delay+0x40>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	0002      	movs	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000010 	.word	0x20000010

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c10:	d828      	bhi.n	8000c64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c12:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <__NVIC_SetPriority+0xd4>)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	589b      	ldr	r3, [r3, r2]
 8000c22:	1dfa      	adds	r2, r7, #7
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	0011      	movs	r1, r2
 8000c28:	2203      	movs	r2, #3
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	21ff      	movs	r1, #255	; 0xff
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	401a      	ands	r2, r3
 8000c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	401a      	ands	r2, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	2303      	movs	r3, #3
 8000c4a:	4003      	ands	r3, r0
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <__NVIC_SetPriority+0xd4>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c62:	e031      	b.n	8000cc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	400b      	ands	r3, r1
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3306      	adds	r3, #6
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	2203      	movs	r2, #3
 8000c86:	400a      	ands	r2, r1
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	21ff      	movs	r1, #255	; 0xff
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	001c      	movs	r4, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	4023      	ands	r3, r4
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	3306      	adds	r3, #6
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	18c3      	adds	r3, r0, r3
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b003      	add	sp, #12
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <SysTick_Config+0x40>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d901      	bls.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e010      	b.n	8000d10 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <SysTick_Config+0x44>)
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	3a01      	subs	r2, #1
 8000cf4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff7d 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SysTick_Config+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x44>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	00ffffff 	.word	0x00ffffff
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ffbf 	bl	8000cd8 <SysTick_Config>
 8000d5a:	0003      	movs	r3, r0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e14f      	b.n	8001014 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	000a      	movs	r2, r1
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d100      	bne.n	8000d8c <HAL_GPIO_Init+0x28>
 8000d8a:	e140      	b.n	800100e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	409a      	lsls	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	43da      	mvns	r2, r3
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2203      	movs	r2, #3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	58d3      	ldr	r3, [r2, r3]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2207      	movs	r2, #7
 8000e60:	4013      	ands	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2107      	movs	r1, #7
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	6939      	ldr	r1, [r7, #16]
 8000e94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	23c0      	movs	r3, #192	; 0xc0
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x174>
 8000ed6:	e09a      	b.n	800100e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	4b51      	ldr	r3, [pc, #324]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	589b      	ldr	r3, [r3, r2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	2390      	movs	r3, #144	; 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1e2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a44      	ldr	r2, [pc, #272]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1de>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a43      	ldr	r2, [pc, #268]	; (8001038 <HAL_GPIO_Init+0x2d4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1da>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a42      	ldr	r2, [pc, #264]	; (800103c <HAL_GPIO_Init+0x2d8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f36:	2303      	movs	r3, #3
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f46:	2300      	movs	r3, #0
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	025b      	lsls	r3, r3, #9
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	029b      	lsls	r3, r3, #10
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	035b      	lsls	r3, r3, #13
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	039b      	lsls	r3, r3, #14
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_GPIO_Init+0x2dc>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	40da      	lsrs	r2, r3
 800101c:	1e13      	subs	r3, r2, #0
 800101e:	d000      	beq.n	8001022 <HAL_GPIO_Init+0x2be>
 8001020:	e6a8      	b.n	8000d74 <HAL_GPIO_Init+0x10>
  } 
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b006      	add	sp, #24
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	48000c00 	.word	0x48000c00
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	0008      	movs	r0, r1
 800104e:	0011      	movs	r1, r2
 8001050:	1cbb      	adds	r3, r7, #2
 8001052:	1c02      	adds	r2, r0, #0
 8001054:	801a      	strh	r2, [r3, #0]
 8001056:	1c7b      	adds	r3, r7, #1
 8001058:	1c0a      	adds	r2, r1, #0
 800105a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	1c7b      	adds	r3, r7, #1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001064:	1cbb      	adds	r3, r7, #2
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106e:	1cbb      	adds	r3, r7, #2
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e082      	b.n	8001198 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2241      	movs	r2, #65	; 0x41
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fb3f 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2241      	movs	r2, #65	; 0x41
 80010b2:	2124      	movs	r1, #36	; 0x24
 80010b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4934      	ldr	r1, [pc, #208]	; (80011a0 <HAL_I2C_Init+0x120>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4931      	ldr	r1, [pc, #196]	; (80011a4 <HAL_I2C_Init+0x124>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	0209      	lsls	r1, r1, #8
 80010f8:	430a      	orrs	r2, r1
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e007      	b.n	800110e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2184      	movs	r1, #132	; 0x84
 8001108:	0209      	lsls	r1, r1, #8
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d104      	bne.n	8001120 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	491f      	ldr	r1, [pc, #124]	; (80011a8 <HAL_I2C_Init+0x128>)
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HAL_I2C_Init+0x124>)
 800113c:	400a      	ands	r2, r1
 800113e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	431a      	orrs	r2, r3
 800114a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69d9      	ldr	r1, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1a      	ldr	r2, [r3, #32]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2241      	movs	r2, #65	; 0x41
 8001184:	2120      	movs	r1, #32
 8001186:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2242      	movs	r2, #66	; 0x42
 8001192:	2100      	movs	r1, #0
 8001194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	f0ffffff 	.word	0xf0ffffff
 80011a4:	ffff7fff 	.word	0xffff7fff
 80011a8:	02008000 	.word	0x02008000

080011ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	0008      	movs	r0, r1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	0019      	movs	r1, r3
 80011ba:	230a      	movs	r3, #10
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	2308      	movs	r3, #8
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	1c0a      	adds	r2, r1, #0
 80011c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2241      	movs	r2, #65	; 0x41
 80011ce:	5c9b      	ldrb	r3, [r3, r2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d000      	beq.n	80011d8 <HAL_I2C_Master_Transmit+0x2c>
 80011d6:	e0e7      	b.n	80013a8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	5c9b      	ldrb	r3, [r3, r2]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_I2C_Master_Transmit+0x3a>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e0e1      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2101      	movs	r1, #1
 80011ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ee:	f7ff fcd9 	bl	8000ba4 <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	0219      	lsls	r1, r3, #8
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2319      	movs	r3, #25
 8001202:	2201      	movs	r2, #1
 8001204:	f000 fa04 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0cc      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2241      	movs	r2, #65	; 0x41
 8001214:	2121      	movs	r1, #33	; 0x21
 8001216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2242      	movs	r2, #66	; 0x42
 800121c:	2110      	movs	r1, #16
 800121e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2208      	movs	r2, #8
 8001230:	18ba      	adds	r2, r7, r2
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d911      	bls.n	800126a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001250:	b2da      	uxtb	r2, r3
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	045c      	lsls	r4, r3, #17
 8001256:	230a      	movs	r3, #10
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <HAL_I2C_Master_Transmit+0x208>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	0023      	movs	r3, r4
 8001264:	f000 fb74 	bl	8001950 <I2C_TransferConfig>
 8001268:	e075      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	b2da      	uxtb	r2, r3
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	049c      	lsls	r4, r3, #18
 800127e:	230a      	movs	r3, #10
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	8819      	ldrh	r1, [r3, #0]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <HAL_I2C_Master_Transmit+0x208>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	0023      	movs	r3, r4
 800128c:	f000 fb60 	bl	8001950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001290:	e061      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f9f8 	bl	800168e <I2C_WaitOnTXISFlagUntilTimeout>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e081      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03a      	beq.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d136      	bne.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	0013      	movs	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	f000 f98b 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e053      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001306:	b29b      	uxth	r3, r3
 8001308:	2bff      	cmp	r3, #255	; 0xff
 800130a:	d911      	bls.n	8001330 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	b2da      	uxtb	r2, r3
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	045c      	lsls	r4, r3, #17
 800131c:	230a      	movs	r3, #10
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	8819      	ldrh	r1, [r3, #0]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	0023      	movs	r3, r4
 800132a:	f000 fb11 	bl	8001950 <I2C_TransferConfig>
 800132e:	e012      	b.n	8001356 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	b2da      	uxtb	r2, r3
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	049c      	lsls	r4, r3, #18
 8001344:	230a      	movs	r3, #10
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	8819      	ldrh	r1, [r3, #0]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	0023      	movs	r3, r4
 8001352:	f000 fafd 	bl	8001950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135a:	b29b      	uxth	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d198      	bne.n	8001292 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f9d0 	bl	800170c <I2C_WaitOnSTOPFlagUntilTimeout>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e01a      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2220      	movs	r2, #32
 800137a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <HAL_I2C_Master_Transmit+0x20c>)
 8001388:	400a      	ands	r2, r1
 800138a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2241      	movs	r2, #65	; 0x41
 8001390:	2120      	movs	r1, #32
 8001392:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2242      	movs	r2, #66	; 0x42
 8001398:	2100      	movs	r1, #0
 800139a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013a8:	2302      	movs	r3, #2
  }
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b007      	add	sp, #28
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	80002000 	.word	0x80002000
 80013b8:	fe00e800 	.word	0xfe00e800

080013bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	0008      	movs	r0, r1
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	0019      	movs	r1, r3
 80013ca:	230a      	movs	r3, #10
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	801a      	strh	r2, [r3, #0]
 80013d2:	2308      	movs	r3, #8
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	1c0a      	adds	r2, r1, #0
 80013d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2241      	movs	r2, #65	; 0x41
 80013de:	5c9b      	ldrb	r3, [r3, r2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d000      	beq.n	80013e8 <HAL_I2C_Master_Receive+0x2c>
 80013e6:	e0e8      	b.n	80015ba <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Master_Receive+0x3a>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e0e2      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2240      	movs	r2, #64	; 0x40
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013fe:	f7ff fbd1 	bl	8000ba4 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	0219      	lsls	r1, r3, #8
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2319      	movs	r3, #25
 8001412:	2201      	movs	r2, #1
 8001414:	f000 f8fc 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0cd      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2241      	movs	r2, #65	; 0x41
 8001424:	2122      	movs	r1, #34	; 0x22
 8001426:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2242      	movs	r2, #66	; 0x42
 800142c:	2110      	movs	r1, #16
 800142e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2208      	movs	r2, #8
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	8812      	ldrh	r2, [r2, #0]
 8001444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001450:	b29b      	uxth	r3, r3
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d911      	bls.n	800147a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001460:	b2da      	uxtb	r2, r3
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	045c      	lsls	r4, r3, #17
 8001466:	230a      	movs	r3, #10
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	8819      	ldrh	r1, [r3, #0]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <HAL_I2C_Master_Receive+0x208>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	0023      	movs	r3, r4
 8001474:	f000 fa6c 	bl	8001950 <I2C_TransferConfig>
 8001478:	e076      	b.n	8001568 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	b2da      	uxtb	r2, r3
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	049c      	lsls	r4, r3, #18
 800148e:	230a      	movs	r3, #10
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	8819      	ldrh	r1, [r3, #0]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_I2C_Master_Receive+0x208>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	0023      	movs	r3, r4
 800149c:	f000 fa58 	bl	8001950 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80014a0:	e062      	b.n	8001568 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 f96b 	bl	8001784 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e082      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03a      	beq.n	8001568 <HAL_I2C_Master_Receive+0x1ac>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d136      	bne.n	8001568 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	0013      	movs	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	f000 f882 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e053      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d911      	bls.n	8001542 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001528:	b2da      	uxtb	r2, r3
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	045c      	lsls	r4, r3, #17
 800152e:	230a      	movs	r3, #10
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	8819      	ldrh	r1, [r3, #0]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	0023      	movs	r3, r4
 800153c:	f000 fa08 	bl	8001950 <I2C_TransferConfig>
 8001540:	e012      	b.n	8001568 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	b2da      	uxtb	r2, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	049c      	lsls	r4, r3, #18
 8001556:	230a      	movs	r3, #10
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	8819      	ldrh	r1, [r3, #0]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	0023      	movs	r3, r4
 8001564:	f000 f9f4 	bl	8001950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d197      	bne.n	80014a2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f8c7 	bl	800170c <I2C_WaitOnSTOPFlagUntilTimeout>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e01a      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2220      	movs	r2, #32
 800158c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <HAL_I2C_Master_Receive+0x20c>)
 800159a:	400a      	ands	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2241      	movs	r2, #65	; 0x41
 80015a2:	2120      	movs	r1, #32
 80015a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2242      	movs	r2, #66	; 0x42
 80015aa:	2100      	movs	r1, #0
 80015ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
  }
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b007      	add	sp, #28
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	80002400 	.word	0x80002400
 80015c8:	fe00e800 	.word	0xfe00e800

080015cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d103      	bne.n	80015ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d007      	beq.n	8001608 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
  }
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001620:	e021      	b.n	8001666 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	d01e      	beq.n	8001666 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001628:	f7ff fabc 	bl	8000ba4 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d302      	bcc.n	800163e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d113      	bne.n	8001666 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	2220      	movs	r2, #32
 8001644:	431a      	orrs	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2241      	movs	r2, #65	; 0x41
 800164e:	2120      	movs	r1, #32
 8001650:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2242      	movs	r2, #66	; 0x42
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	4013      	ands	r3, r2
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	425a      	negs	r2, r3
 8001676:	4153      	adcs	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	001a      	movs	r2, r3
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d0ce      	beq.n	8001622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}

0800168e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800169a:	e02b      	b.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f8da 	bl	800185c <I2C_IsAcknowledgeFailed>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e029      	b.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	d01e      	beq.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7ff fa75 	bl	8000ba4 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d113      	bne.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	2220      	movs	r2, #32
 80016d2:	431a      	orrs	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2241      	movs	r2, #65	; 0x41
 80016dc:	2120      	movs	r1, #32
 80016de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2242      	movs	r2, #66	; 0x42
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	2100      	movs	r1, #0
 80016ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e007      	b.n	8001704 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2202      	movs	r2, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d1cc      	bne.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}

0800170c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001718:	e028      	b.n	800176c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f89b 	bl	800185c <I2C_IsAcknowledgeFailed>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e026      	b.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172e:	f7ff fa39 	bl	8000ba4 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	429a      	cmp	r2, r3
 800173c:	d302      	bcc.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d113      	bne.n	800176c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	2220      	movs	r2, #32
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2241      	movs	r2, #65	; 0x41
 8001754:	2120      	movs	r1, #32
 8001756:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2242      	movs	r2, #66	; 0x42
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2220      	movs	r2, #32
 8001774:	4013      	ands	r3, r2
 8001776:	2b20      	cmp	r3, #32
 8001778:	d1cf      	bne.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}

08001784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001790:	e055      	b.n	800183e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 f85f 	bl	800185c <I2C_IsAcknowledgeFailed>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e053      	b.n	800184e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2220      	movs	r2, #32
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d129      	bne.n	8001808 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2204      	movs	r2, #4
 80017bc:	4013      	ands	r3, r2
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d105      	bne.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e03f      	b.n	800184e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	491d      	ldr	r1, [pc, #116]	; (8001858 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2241      	movs	r2, #65	; 0x41
 80017f0:	2120      	movs	r1, #32
 80017f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2242      	movs	r2, #66	; 0x42
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e022      	b.n	800184e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001808:	f7ff f9cc 	bl	8000ba4 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d302      	bcc.n	800181e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	2220      	movs	r2, #32
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	2120      	movs	r1, #32
 8001830:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e007      	b.n	800184e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2204      	movs	r2, #4
 8001846:	4013      	ands	r3, r2
 8001848:	2b04      	cmp	r3, #4
 800184a:	d1a2      	bne.n	8001792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b004      	add	sp, #16
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	fe00e800 	.word	0xfe00e800

0800185c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2210      	movs	r2, #16
 8001870:	4013      	ands	r3, r2
 8001872:	2b10      	cmp	r3, #16
 8001874:	d164      	bne.n	8001940 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	049b      	lsls	r3, r3, #18
 8001880:	401a      	ands	r2, r3
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	429a      	cmp	r2, r3
 8001888:	d02b      	beq.n	80018e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	01c9      	lsls	r1, r1, #7
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800189c:	e021      	b.n	80018e2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	d01e      	beq.n	80018e2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a4:	f7ff f97e 	bl	8000ba4 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d302      	bcc.n	80018ba <I2C_IsAcknowledgeFailed+0x5e>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d113      	bne.n	80018e2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	2220      	movs	r2, #32
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2120      	movs	r1, #32
 80018cc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2242      	movs	r2, #66	; 0x42
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e02f      	b.n	8001942 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2220      	movs	r2, #32
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d1d6      	bne.n	800189e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2210      	movs	r2, #16
 80018f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2220      	movs	r2, #32
 80018fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fe62 	bl	80015cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <I2C_IsAcknowledgeFailed+0xf0>)
 8001914:	400a      	ands	r2, r1
 8001916:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	2204      	movs	r2, #4
 800191e:	431a      	orrs	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2241      	movs	r2, #65	; 0x41
 8001928:	2120      	movs	r1, #32
 800192a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2242      	movs	r2, #66	; 0x42
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	2100      	movs	r1, #0
 800193a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	fe00e800 	.word	0xfe00e800

08001950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	0008      	movs	r0, r1
 800195a:	0011      	movs	r1, r2
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	240a      	movs	r4, #10
 8001960:	193b      	adds	r3, r7, r4
 8001962:	1c02      	adds	r2, r0, #0
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	2009      	movs	r0, #9
 8001968:	183b      	adds	r3, r7, r0
 800196a:	1c0a      	adds	r2, r1, #0
 800196c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	0d51      	lsrs	r1, r2, #21
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	00d2      	lsls	r2, r2, #3
 800197c:	400a      	ands	r2, r1
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <I2C_TransferConfig+0x68>)
 8001980:	430a      	orrs	r2, r1
 8001982:	43d2      	mvns	r2, r2
 8001984:	401a      	ands	r2, r3
 8001986:	0011      	movs	r1, r2
 8001988:	193b      	adds	r3, r7, r4
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	059b      	lsls	r3, r3, #22
 800198e:	0d9a      	lsrs	r2, r3, #22
 8001990:	183b      	adds	r3, r7, r0
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	0418      	lsls	r0, r3, #16
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	4003      	ands	r3, r0
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b005      	add	sp, #20
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	03ff63ff 	.word	0x03ff63ff

080019bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d138      	bne.n	8001a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019dc:	2302      	movs	r3, #2
 80019de:	e032      	b.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	2101      	movs	r1, #1
 80019e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2241      	movs	r2, #65	; 0x41
 80019ec:	2124      	movs	r1, #36	; 0x24
 80019ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4911      	ldr	r1, [pc, #68]	; (8001a50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2241      	movs	r2, #65	; 0x41
 8001a34:	2120      	movs	r1, #32
 8001a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
  }
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	ffffefff 	.word	0xffffefff

08001a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2241      	movs	r2, #65	; 0x41
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d139      	bne.n	8001ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	5c9b      	ldrb	r3, [r3, r2]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e033      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2124      	movs	r1, #36	; 0x24
 8001a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2241      	movs	r2, #65	; 0x41
 8001ace:	2120      	movs	r1, #32
 8001ad0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
  }
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	fffff0ff 	.word	0xfffff0ff

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e305      	b.n	800210a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x1e>
 8001b08:	e08d      	b.n	8001c26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b0a:	4bc5      	ldr	r3, [pc, #788]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00e      	beq.n	8001b34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b16:	4bc2      	ldr	r3, [pc, #776]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x64>
 8001b22:	4bbf      	ldr	r3, [pc, #764]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	23c0      	movs	r3, #192	; 0xc0
 8001b28:	025b      	lsls	r3, r3, #9
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	025b      	lsls	r3, r3, #9
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10d      	bne.n	8001b50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4bba      	ldr	r3, [pc, #744]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x56>
 8001b40:	e070      	b.n	8001c24 <HAL_RCC_OscConfig+0x138>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d000      	beq.n	8001b4c <HAL_RCC_OscConfig+0x60>
 8001b4a:	e06b      	b.n	8001c24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e2dc      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x7c>
 8001b58:	4bb1      	ldr	r3, [pc, #708]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	0249      	lsls	r1, r1, #9
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e02f      	b.n	8001bc8 <HAL_RCC_OscConfig+0xdc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x9e>
 8001b70:	4bab      	ldr	r3, [pc, #684]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b76:	49ab      	ldr	r1, [pc, #684]	; (8001e24 <HAL_RCC_OscConfig+0x338>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4ba8      	ldr	r3, [pc, #672]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b82:	49a9      	ldr	r1, [pc, #676]	; (8001e28 <HAL_RCC_OscConfig+0x33c>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e01e      	b.n	8001bc8 <HAL_RCC_OscConfig+0xdc>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10e      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xc4>
 8001b92:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4ba2      	ldr	r3, [pc, #648]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	02c9      	lsls	r1, r1, #11
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	4b9f      	ldr	r3, [pc, #636]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	0249      	lsls	r1, r1, #9
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xdc>
 8001bb0:	4b9b      	ldr	r3, [pc, #620]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b9a      	ldr	r3, [pc, #616]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001bb6:	499b      	ldr	r1, [pc, #620]	; (8001e24 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b98      	ldr	r3, [pc, #608]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b97      	ldr	r3, [pc, #604]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001bc2:	4999      	ldr	r1, [pc, #612]	; (8001e28 <HAL_RCC_OscConfig+0x33c>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d014      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ffe8 	bl	8000ba4 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7fe ffe3 	bl	8000ba4 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e28e      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bec:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0xee>
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7fe ffd3 	bl	8000ba4 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7fe ffce 	bl	8000ba4 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e279      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b82      	ldr	r3, [pc, #520]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x118>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <HAL_RCC_OscConfig+0x146>
 8001c30:	e06c      	b.n	8001d0c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	220c      	movs	r2, #12
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d00e      	beq.n	8001c5a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c3c:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	220c      	movs	r2, #12
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d11f      	bne.n	8001c88 <HAL_RCC_OscConfig+0x19c>
 8001c48:	4b75      	ldr	r3, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	401a      	ands	r2, r3
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x184>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e24c      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	22f8      	movs	r2, #248	; 0xf8
 8001c76:	4393      	bics	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00da      	lsls	r2, r3, #3
 8001c80:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e041      	b.n	8001d0c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d024      	beq.n	8001cda <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff82 	bl	8000ba4 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7fe ff7d 	bl	8000ba4 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e228      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f1      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	22f8      	movs	r2, #248	; 0xf8
 8001cc8:	4393      	bics	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	00da      	lsls	r2, r3, #3
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff5d 	bl	8000ba4 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7fe ff58 	bl	8000ba4 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e203      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f1      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2208      	movs	r2, #8
 8001d12:	4013      	ands	r3, r2
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ff3b 	bl	8000ba4 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d34:	f7fe ff36 	bl	8000ba4 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1e1      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f1      	beq.n	8001d34 <HAL_RCC_OscConfig+0x248>
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	438a      	bics	r2, r1
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe ff21 	bl	8000ba4 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7fe ff1c 	bl	8000ba4 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1c7      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d1f1      	bne.n	8001d68 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d100      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2a4>
 8001d8e:	e0b5      	b.n	8001efc <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	4013      	ands	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0549      	lsls	r1, r1, #21
 8001dae:	430a      	orrs	r2, r1
 8001db0:	61da      	str	r2, [r3, #28]
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	055b      	lsls	r3, r3, #21
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc0:	231f      	movs	r3, #31
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_RCC_OscConfig+0x340>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d11a      	bne.n	8001e0a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_RCC_OscConfig+0x340>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_RCC_OscConfig+0x340>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0049      	lsls	r1, r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fedf 	bl	8000ba4 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe feda 	bl	8000ba4 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e185      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x340>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10e      	bne.n	8001e30 <HAL_RCC_OscConfig+0x344>
 8001e12:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001e14:	6a1a      	ldr	r2, [r3, #32]
 8001e16:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_OscConfig+0x334>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	621a      	str	r2, [r3, #32]
 8001e1e:	e035      	b.n	8001e8c <HAL_RCC_OscConfig+0x3a0>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	fffeffff 	.word	0xfffeffff
 8001e28:	fffbffff 	.word	0xfffbffff
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x366>
 8001e38:	4bb6      	ldr	r3, [pc, #728]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	4bb5      	ldr	r3, [pc, #724]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	621a      	str	r2, [r3, #32]
 8001e44:	4bb3      	ldr	r3, [pc, #716]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4bb2      	ldr	r3, [pc, #712]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x3a0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x388>
 8001e5a:	4bae      	ldr	r3, [pc, #696]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e5c:	6a1a      	ldr	r2, [r3, #32]
 8001e5e:	4bad      	ldr	r3, [pc, #692]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e60:	2104      	movs	r1, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	621a      	str	r2, [r3, #32]
 8001e66:	4bab      	ldr	r3, [pc, #684]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	4baa      	ldr	r3, [pc, #680]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	621a      	str	r2, [r3, #32]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x3a0>
 8001e74:	4ba7      	ldr	r3, [pc, #668]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	4ba6      	ldr	r3, [pc, #664]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	4ba4      	ldr	r3, [pc, #656]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	4ba3      	ldr	r3, [pc, #652]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001e86:	2104      	movs	r1, #4
 8001e88:	438a      	bics	r2, r1
 8001e8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d014      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe fe86 	bl	8000ba4 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7fe fe81 	bl	8000ba4 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a9b      	ldr	r2, [pc, #620]	; (8002118 <HAL_RCC_OscConfig+0x62c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e12b      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b98      	ldr	r3, [pc, #608]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3b2>
 8001ebc:	e013      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fe71 	bl	8000ba4 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	e009      	b.n	8001edc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe fe6c 	bl	8000ba4 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	4a91      	ldr	r2, [pc, #580]	; (8002118 <HAL_RCC_OscConfig+0x62c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e116      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee6:	231f      	movs	r3, #31
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	4b87      	ldr	r3, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001ef6:	4989      	ldr	r1, [pc, #548]	; (800211c <HAL_RCC_OscConfig+0x630>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2210      	movs	r2, #16
 8001f02:	4013      	ands	r3, r2
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d12a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f0e:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f12:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f14:	2104      	movs	r1, #4
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f1a:	4b7e      	ldr	r3, [pc, #504]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f20:	2101      	movs	r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7fe fe3d 	bl	8000ba4 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f30:	f7fe fe38 	bl	8000ba4 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0e3      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f1      	beq.n	8001f30 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	22f8      	movs	r2, #248	; 0xf8
 8001f52:	4393      	bics	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
 8001f62:	e034      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	3305      	adds	r3, #5
 8001f6a:	d111      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f6c:	4b69      	ldr	r3, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f72:	2104      	movs	r1, #4
 8001f74:	438a      	bics	r2, r1
 8001f76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f78:	4b66      	ldr	r3, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7c:	22f8      	movs	r2, #248	; 0xf8
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	00da      	lsls	r2, r3, #3
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8e:	e01e      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f90:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f94:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f96:	2104      	movs	r1, #4
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fdfc 	bl	8000ba4 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fb2:	f7fe fdf7 	bl	8000ba4 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0a2      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1f1      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d100      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4ec>
 8001fd6:	e097      	b.n	8002108 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4fa>
 8001fe4:	e06b      	b.n	80020be <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d14c      	bne.n	8002088 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8001ff4:	494a      	ldr	r1, [pc, #296]	; (8002120 <HAL_RCC_OscConfig+0x634>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fdd3 	bl	8000ba4 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fdce 	bl	8000ba4 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e079      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	049b      	lsls	r3, r3, #18
 800201e:	4013      	ands	r3, r2
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	220f      	movs	r2, #15
 8002028:	4393      	bics	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002032:	430a      	orrs	r2, r1
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <HAL_RCC_OscConfig+0x638>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	431a      	orrs	r2, r3
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0449      	lsls	r1, r1, #17
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fda1 	bl	8000ba4 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe fd9c 	bl	8000ba4 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e047      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	049b      	lsls	r3, r3, #18
 8002082:	4013      	ands	r3, r2
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x57c>
 8002086:	e03f      	b.n	8002108 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 800208e:	4924      	ldr	r1, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x634>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fd86 	bl	8000ba4 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe fd81 	bl	8000ba4 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e02c      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	049b      	lsls	r3, r3, #18
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x5b2>
 80020bc:	e024      	b.n	8002108 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01f      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x628>)
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	401a      	ands	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10e      	bne.n	8002104 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	220f      	movs	r2, #15
 80020ea:	401a      	ands	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	23f0      	movs	r3, #240	; 0xf0
 80020f8:	039b      	lsls	r3, r3, #14
 80020fa:	401a      	ands	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b008      	add	sp, #32
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40021000 	.word	0x40021000
 8002118:	00001388 	.word	0x00001388
 800211c:	efffffff 	.word	0xefffffff
 8002120:	feffffff 	.word	0xfeffffff
 8002124:	ffc27fff 	.word	0xffc27fff

08002128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b3      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d911      	bls.n	800216e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b58      	ldr	r3, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	4b55      	ldr	r3, [pc, #340]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e09a      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d015      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	4013      	ands	r3, r2
 8002180:	d006      	beq.n	8002190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 8002188:	21e0      	movs	r1, #224	; 0xe0
 800218a:	00c9      	lsls	r1, r1, #3
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	22f0      	movs	r2, #240	; 0xf0
 8002196:	4393      	bics	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d114      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06e      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	049b      	lsls	r3, r3, #18
 80021d6:	4013      	ands	r3, r2
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e062      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e05b      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	4393      	bics	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fcd0 	bl	8000ba4 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e009      	b.n	800221e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe fccb 	bl	8000ba4 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_RCC_ClockConfig+0x18c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e042      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	220c      	movs	r2, #12
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1ec      	bne.n	800220a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d211      	bcs.n	8002262 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x184>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e020      	b.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_RCC_ClockConfig+0x190>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002280:	f000 f820 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002284:	0001      	movs	r1, r0
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x188>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x194>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	000a      	movs	r2, r1
 8002296:	40da      	lsrs	r2, r3
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x198>)
 800229a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800229c:	2000      	movs	r0, #0
 800229e:	f7fe fc3b 	bl	8000b18 <HAL_InitTick>
  
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	00001388 	.word	0x00001388
 80022b8:	fffff8ff 	.word	0xfffff8ff
 80022bc:	08002ce4 	.word	0x08002ce4
 80022c0:	20000008 	.word	0x20000008

080022c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08f      	sub	sp, #60	; 0x3c
 80022c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80022ca:	2314      	movs	r3, #20
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022d2:	c313      	stmia	r3!, {r0, r1, r4}
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022de:	c313      	stmia	r3!, {r0, r1, r4}
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	220c      	movs	r2, #12
 8002302:	4013      	ands	r3, r2
 8002304:	2b04      	cmp	r3, #4
 8002306:	d002      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x4a>
 8002308:	2b08      	cmp	r3, #8
 800230a:	d003      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x50>
 800230c:	e02f      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002312:	e02f      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	220f      	movs	r2, #15
 800231a:	4013      	ands	r3, r2
 800231c:	2214      	movs	r2, #20
 800231e:	18ba      	adds	r2, r7, r2
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	220f      	movs	r2, #15
 800232a:	4013      	ands	r3, r2
 800232c:	1d3a      	adds	r2, r7, #4
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002334:	23c0      	movs	r3, #192	; 0xc0
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	401a      	ands	r2, r3
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	429a      	cmp	r2, r3
 8002340:	d109      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002344:	4811      	ldr	r0, [pc, #68]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002346:	f7fd fedf 	bl	8000108 <__udivsi3>
 800234a:	0003      	movs	r3, r0
 800234c:	001a      	movs	r2, r3
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	4353      	muls	r3, r2
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	e008      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 800235a:	f7fd fed5 	bl	8000108 <__udivsi3>
 800235e:	0003      	movs	r3, r0
 8002360:	001a      	movs	r2, r3
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	4353      	muls	r3, r2
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002372:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b00f      	add	sp, #60	; 0x3c
 800237c:	bd90      	pop	{r4, r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	08002cc4 	.word	0x08002cc4
 8002384:	08002cd4 	.word	0x08002cd4
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023a8:	f7ff fff2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ac:	0001      	movs	r1, r0
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	2207      	movs	r2, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	40d9      	lsrs	r1, r3
 80023be:	000b      	movs	r3, r1
}    
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08002cf4 	.word	0x08002cf4

080023d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	4013      	ands	r3, r2
 80023ea:	d100      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023ec:	e08f      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2317      	movs	r3, #23
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	055b      	lsls	r3, r3, #21
 80023fe:	4013      	ands	r3, r2
 8002400:	d111      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0549      	lsls	r1, r1, #21
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
 8002410:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	055b      	lsls	r3, r3, #21
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2317      	movs	r3, #23
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4013      	ands	r3, r2
 8002430:	d11a      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b51      	ldr	r3, [pc, #324]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	0049      	lsls	r1, r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002440:	f7fe fbb0 	bl	8000ba4 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fbab 	bl	8000ba4 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b64      	cmp	r3, #100	; 0x64
 8002456:	d901      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e087      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d0f0      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002468:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	23c0      	movs	r3, #192	; 0xc0
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d034      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	23c0      	movs	r3, #192	; 0xc0
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4013      	ands	r3, r2
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	429a      	cmp	r2, r3
 8002488:	d02c      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002494:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	0249      	lsls	r1, r1, #9
 800249e:	430a      	orrs	r2, r1
 80024a0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024a8:	4935      	ldr	r1, [pc, #212]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fb72 	bl	8000ba4 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e009      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fb6d 	bl	8000ba4 <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e048      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f8:	2317      	movs	r3, #23
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002508:	491f      	ldr	r1, [pc, #124]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800250a:	400a      	ands	r2, r1
 800250c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	2203      	movs	r2, #3
 800251e:	4393      	bics	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002528:	430a      	orrs	r2, r1
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	4013      	ands	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2210      	movs	r2, #16
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002546:	430a      	orrs	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002566:	430a      	orrs	r2, r1
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b006      	add	sp, #24
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
 800257c:	fffffcff 	.word	0xfffffcff
 8002580:	fffeffff 	.word	0xfffeffff
 8002584:	00001388 	.word	0x00001388
 8002588:	efffffff 	.word	0xefffffff

0800258c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e044      	b.n	8002628 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2274      	movs	r2, #116	; 0x74
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7fe fa27 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2224      	movs	r2, #36	; 0x24
 80025ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	438a      	bics	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f830 	bl	8002634 <UART_SetConfig>
 80025d4:	0003      	movs	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e024      	b.n	8002628 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f979 	bl	80028e0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	490d      	ldr	r1, [pc, #52]	; (8002630 <HAL_UART_Init+0xa4>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2108      	movs	r1, #8
 800260a:	438a      	bics	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fa11 	bl	8002a48 <UART_CheckIdleState>
 8002626:	0003      	movs	r3, r0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffff7ff 	.word	0xfffff7ff

08002634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800263c:	231e      	movs	r3, #30
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a95      	ldr	r2, [pc, #596]	; (80028b8 <UART_SetConfig+0x284>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a90      	ldr	r2, [pc, #576]	; (80028bc <UART_SetConfig+0x288>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <UART_SetConfig+0x28c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a83      	ldr	r2, [pc, #524]	; (80028c4 <UART_SetConfig+0x290>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d125      	bne.n	8002706 <UART_SetConfig+0xd2>
 80026ba:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <UART_SetConfig+0x294>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	2203      	movs	r2, #3
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00f      	beq.n	80026e6 <UART_SetConfig+0xb2>
 80026c6:	d304      	bcc.n	80026d2 <UART_SetConfig+0x9e>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d011      	beq.n	80026f0 <UART_SetConfig+0xbc>
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d005      	beq.n	80026dc <UART_SetConfig+0xa8>
 80026d0:	e013      	b.n	80026fa <UART_SetConfig+0xc6>
 80026d2:	231f      	movs	r3, #31
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e036      	b.n	800274a <UART_SetConfig+0x116>
 80026dc:	231f      	movs	r3, #31
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e031      	b.n	800274a <UART_SetConfig+0x116>
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2204      	movs	r2, #4
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e02c      	b.n	800274a <UART_SetConfig+0x116>
 80026f0:	231f      	movs	r3, #31
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2208      	movs	r2, #8
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e027      	b.n	800274a <UART_SetConfig+0x116>
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2210      	movs	r2, #16
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	e021      	b.n	800274a <UART_SetConfig+0x116>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a70      	ldr	r2, [pc, #448]	; (80028cc <UART_SetConfig+0x298>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d104      	bne.n	800271a <UART_SetConfig+0xe6>
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e017      	b.n	800274a <UART_SetConfig+0x116>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6c      	ldr	r2, [pc, #432]	; (80028d0 <UART_SetConfig+0x29c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d104      	bne.n	800272e <UART_SetConfig+0xfa>
 8002724:	231f      	movs	r3, #31
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e00d      	b.n	800274a <UART_SetConfig+0x116>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a68      	ldr	r2, [pc, #416]	; (80028d4 <UART_SetConfig+0x2a0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d104      	bne.n	8002742 <UART_SetConfig+0x10e>
 8002738:	231f      	movs	r3, #31
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e003      	b.n	800274a <UART_SetConfig+0x116>
 8002742:	231f      	movs	r3, #31
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2210      	movs	r2, #16
 8002748:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	429a      	cmp	r2, r3
 8002754:	d15c      	bne.n	8002810 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8002756:	231f      	movs	r3, #31
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d00d      	beq.n	800277c <UART_SetConfig+0x148>
 8002760:	dc02      	bgt.n	8002768 <UART_SetConfig+0x134>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <UART_SetConfig+0x13e>
 8002766:	e015      	b.n	8002794 <UART_SetConfig+0x160>
 8002768:	2b04      	cmp	r3, #4
 800276a:	d00a      	beq.n	8002782 <UART_SetConfig+0x14e>
 800276c:	2b08      	cmp	r3, #8
 800276e:	d00d      	beq.n	800278c <UART_SetConfig+0x158>
 8002770:	e010      	b.n	8002794 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002772:	f7ff fe17 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]
        break;
 800277a:	e012      	b.n	80027a2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800277c:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <UART_SetConfig+0x2a4>)
 800277e:	61bb      	str	r3, [r7, #24]
        break;
 8002780:	e00f      	b.n	80027a2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002782:	f7ff fd9f 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002786:	0003      	movs	r3, r0
 8002788:	61bb      	str	r3, [r7, #24]
        break;
 800278a:	e00a      	b.n	80027a2 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	61bb      	str	r3, [r7, #24]
        break;
 8002792:	e006      	b.n	80027a2 <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002798:	231e      	movs	r3, #30
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
        break;
 80027a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <UART_SetConfig+0x176>
 80027a8:	e079      	b.n	800289e <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	005a      	lsls	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	18d2      	adds	r2, r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0019      	movs	r1, r3
 80027bc:	0010      	movs	r0, r2
 80027be:	f7fd fca3 	bl	8000108 <__udivsi3>
 80027c2:	0003      	movs	r3, r0
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	d91b      	bls.n	8002806 <UART_SetConfig+0x1d2>
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4a42      	ldr	r2, [pc, #264]	; (80028dc <UART_SetConfig+0x2a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d817      	bhi.n	8002806 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	200e      	movs	r0, #14
 80027dc:	183b      	adds	r3, r7, r0
 80027de:	210f      	movs	r1, #15
 80027e0:	438a      	bics	r2, r1
 80027e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2207      	movs	r2, #7
 80027ec:	4013      	ands	r3, r2
 80027ee:	b299      	uxth	r1, r3
 80027f0:	183b      	adds	r3, r7, r0
 80027f2:	183a      	adds	r2, r7, r0
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	183a      	adds	r2, r7, r0
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	e04b      	b.n	800289e <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8002806:	231e      	movs	r3, #30
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e046      	b.n	800289e <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002810:	231f      	movs	r3, #31
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d00d      	beq.n	8002836 <UART_SetConfig+0x202>
 800281a:	dc02      	bgt.n	8002822 <UART_SetConfig+0x1ee>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <UART_SetConfig+0x1f8>
 8002820:	e015      	b.n	800284e <UART_SetConfig+0x21a>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d00a      	beq.n	800283c <UART_SetConfig+0x208>
 8002826:	2b08      	cmp	r3, #8
 8002828:	d00d      	beq.n	8002846 <UART_SetConfig+0x212>
 800282a:	e010      	b.n	800284e <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800282c:	f7ff fdba 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
        break;
 8002834:	e012      	b.n	800285c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <UART_SetConfig+0x2a4>)
 8002838:	61bb      	str	r3, [r7, #24]
        break;
 800283a:	e00f      	b.n	800285c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283c:	f7ff fd42 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002840:	0003      	movs	r3, r0
 8002842:	61bb      	str	r3, [r7, #24]
        break;
 8002844:	e00a      	b.n	800285c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	61bb      	str	r3, [r7, #24]
        break;
 800284c:	e006      	b.n	800285c <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002852:	231e      	movs	r3, #30
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
        break;
 800285a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01d      	beq.n	800289e <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085a      	lsrs	r2, r3, #1
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	18d2      	adds	r2, r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	0019      	movs	r1, r3
 8002872:	0010      	movs	r0, r2
 8002874:	f7fd fc48 	bl	8000108 <__udivsi3>
 8002878:	0003      	movs	r3, r0
 800287a:	b29b      	uxth	r3, r3
 800287c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d908      	bls.n	8002896 <UART_SetConfig+0x262>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <UART_SetConfig+0x2a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d804      	bhi.n	8002896 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	e003      	b.n	800289e <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8002896:	231e      	movs	r3, #30
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028aa:	231e      	movs	r3, #30
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b008      	add	sp, #32
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	efff69f3 	.word	0xefff69f3
 80028bc:	ffffcfff 	.word	0xffffcfff
 80028c0:	fffff4ff 	.word	0xfffff4ff
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40004800 	.word	0x40004800
 80028d4:	40004c00 	.word	0x40004c00
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	0000ffff 	.word	0x0000ffff

080028e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2201      	movs	r2, #1
 80028ee:	4013      	ands	r3, r2
 80028f0:	d00b      	beq.n	800290a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a4a      	ldr	r2, [pc, #296]	; (8002a24 <UART_AdvFeatureConfig+0x144>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d00b      	beq.n	800292c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a43      	ldr	r2, [pc, #268]	; (8002a28 <UART_AdvFeatureConfig+0x148>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2204      	movs	r2, #4
 8002932:	4013      	ands	r3, r2
 8002934:	d00b      	beq.n	800294e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <UART_AdvFeatureConfig+0x14c>)
 800293e:	4013      	ands	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2208      	movs	r2, #8
 8002954:	4013      	ands	r3, r2
 8002956:	d00b      	beq.n	8002970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <UART_AdvFeatureConfig+0x150>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2210      	movs	r2, #16
 8002976:	4013      	ands	r3, r2
 8002978:	d00b      	beq.n	8002992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <UART_AdvFeatureConfig+0x154>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <UART_AdvFeatureConfig+0x158>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	4013      	ands	r3, r2
 80029bc:	d01d      	beq.n	80029fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <UART_AdvFeatureConfig+0x15c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	035b      	lsls	r3, r3, #13
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10b      	bne.n	80029fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <UART_AdvFeatureConfig+0x160>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	4013      	ands	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <UART_AdvFeatureConfig+0x164>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
  }
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	fffdffff 	.word	0xfffdffff
 8002a28:	fffeffff 	.word	0xfffeffff
 8002a2c:	fffbffff 	.word	0xfffbffff
 8002a30:	ffff7fff 	.word	0xffff7fff
 8002a34:	ffffefff 	.word	0xffffefff
 8002a38:	ffffdfff 	.word	0xffffdfff
 8002a3c:	ffefffff 	.word	0xffefffff
 8002a40:	ff9fffff 	.word	0xff9fffff
 8002a44:	fff7ffff 	.word	0xfff7ffff

08002a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	2100      	movs	r1, #0
 8002a56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a58:	f7fe f8a4 	bl	8000ba4 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2208      	movs	r2, #8
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d10d      	bne.n	8002a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	0399      	lsls	r1, r3, #14
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <UART_CheckIdleState+0x90>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f000 f82d 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d001      	beq.n	8002a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e022      	b.n	8002ad0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d10d      	bne.n	8002ab4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	03d9      	lsls	r1, r3, #15
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <UART_CheckIdleState+0x90>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f000 f818 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e00d      	b.n	8002ad0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2274      	movs	r2, #116	; 0x74
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b004      	add	sp, #16
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	01ffffff 	.word	0x01ffffff

08002adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	; 0x50
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	1dfb      	adds	r3, r7, #7
 8002aea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aec:	e09b      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af0:	3301      	adds	r3, #1
 8002af2:	d100      	bne.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002af4:	e097      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7fe f855 	bl	8000ba4 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d139      	bne.n	8002b80 <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
 8002b16:	2301      	movs	r3, #1
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	f383 8810 	msr	PRIMASK, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4949      	ldr	r1, [pc, #292]	; (8002c50 <UART_WaitOnFlagUntilTimeout+0x174>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
 8002b44:	2301      	movs	r3, #1
 8002b46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	f383 8810 	msr	PRIMASK, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b64:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2274      	movs	r2, #116	; 0x74
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e063      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2204      	movs	r2, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d04c      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	401a      	ands	r2, r3
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d142      	bne.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bae:	613b      	str	r3, [r7, #16]
  return(result);
 8002bb0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f383 8810 	msr	PRIMASK, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4921      	ldr	r1, [pc, #132]	; (8002c50 <UART_WaitOnFlagUntilTimeout+0x174>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bde:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be2:	2301      	movs	r3, #1
 8002be4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f383 8810 	msr	PRIMASK, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	2120      	movs	r1, #32
 8002c18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2274      	movs	r2, #116	; 0x74
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e010      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	425a      	negs	r2, r3
 8002c36:	4153      	adcs	r3, r2
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d100      	bne.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x16a>
 8002c44:	e753      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b014      	add	sp, #80	; 0x50
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	fffffe5f 	.word	0xfffffe5f

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	2600      	movs	r6, #0
 8002c58:	4d0c      	ldr	r5, [pc, #48]	; (8002c8c <__libc_init_array+0x38>)
 8002c5a:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	2600      	movs	r6, #0
 8002c66:	f000 f821 	bl	8002cac <_init>
 8002c6a:	4d0a      	ldr	r5, [pc, #40]	; (8002c94 <__libc_init_array+0x40>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <__libc_init_array+0x44>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	00b3      	lsls	r3, r6, #2
 8002c7a:	58eb      	ldr	r3, [r5, r3]
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	00b3      	lsls	r3, r6, #2
 8002c84:	58eb      	ldr	r3, [r5, r3]
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002cfc 	.word	0x08002cfc
 8002c90:	08002cfc 	.word	0x08002cfc
 8002c94:	08002cfc 	.word	0x08002cfc
 8002c98:	08002d00 	.word	0x08002d00

08002c9c <memset>:
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	1812      	adds	r2, r2, r0
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <memset+0xa>
 8002ca4:	4770      	bx	lr
 8002ca6:	7019      	strb	r1, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	e7f9      	b.n	8002ca0 <memset+0x4>

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
